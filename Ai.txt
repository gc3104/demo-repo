% Gender Facts
male(john).
male(paul).
male(james).
male(ethan).
male(oliver).

female(mary).
female(lisa).
female(emma).
female(sophia).

% Parent Facts
parent(john, mary).
parent(john, paul).
parent(mary, lisa).
parent(paul, james).
parent(paul, emma).
parent(lisa, sophia).
parent(james, oliver).
parent(emma, ethan).

% Relationship Rules

father(X, Y) :- parent(X, Y), male(X).
mother(X, Y) :- parent(X, Y), female(X).
grandfather(X, Y) :- parent(X, Z), parent(Z, Y), male(X).
grandmother(X, Y) :- parent(X, Z), parent(Z, Y), female(X).
sibling(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y.

% Auto-run Main Program
:- initialization(main).

main :-
    (mother(mary, lisa) -> write('Mother Test: true'), nl ; write('Mother Test: false'), nl),
    (father(john, paul) -> write('Father Test: true'), nl ; write('Father Test: false'), nl),
    (grandfather(john, james) -> write('Grandfather Test: true'), nl ; write('Grandfather Test: false'), nl),
    (grandmother(mary, sophia) -> write('Grandmother Test: true'), nl ; write('Grandmother Test: false'), nl),
    (sibling(mary, paul) -> write('Sibling Test 1: true'), nl ; write('Sibling Test 1: false'), nl),
    (sibling(james, emma) -> write('Sibling Test 2: true'), nl ; write('Sibling Test 2: false'), nl),
    halt.
import random

N = 8  # 8 queens

def random_board():
    # Each index represents a column; the value at index is the row of the queen
    return [random.randint(0, N - 1) for _ in range(N)]

def compute_heuristic(board):
    # Count number of attacking pairs
    conflicts = 0
    for i in range(N):
        for j in range(i + 1, N):
            if board[i] == board[j] or abs(board[i] - board[j]) == abs(i - j):
                conflicts += 1
    return conflicts

def get_best_neighbor(board):
    best_board = board[:]
    min_heuristic = compute_heuristic(board)
    
    for col in range(N):
        original_row = board[col]
        for row in range(N):
            if row == original_row:
                continue
            board[col] = row
            h = compute_heuristic(board)
            if h < min_heuristic:
                min_heuristic = h
                best_board = board[:]
        board[col] = original_row  # Restore original
    
    return best_board, min_heuristic

def hill_climbing():
    current = random_board()
    current_h = compute_heuristic(current)
    
    steps = 0
    while True:
        neighbor, neighbor_h = get_best_neighbor(current)
        steps += 1
        if neighbor_h >= current_h:
            break  # No improvement
        current, current_h = neighbor, neighbor_h

        if current_h == 0:
            break  # Goal reached

    return current, current_h, steps

# Run the algorithm
if __name__ == "__main__":
    solution, h, steps = hill_climbing()
    print("Final Board (column index is fixed, value = row):")
    print(solution)
    print("Heuristic (0 means solution):", h)
    print("Steps taken:", steps)
import math

def print_board(board):
    print()
    for i in range(3):
        print(" | ".join(board[i*3:(i+1)*3]))
        if i < 2:
            print("--+---+--")
    print()

def check_winner(board):
    win_conditions = [
        (0,1,2), (3,4,5), (6,7,8),  # rows
        (0,3,6), (1,4,7), (2,5,8),  # columns
        (0,4,8), (2,4,6)            # diagonals
    ]
    for i, j, k in win_conditions:
        if board[i] == board[j] == board[k] != ' ':
            return board[i]
    if ' ' not in board:
        return 'Draw'
    return None

def minimax(board, depth, is_maximizing):
    result = check_winner(board)
    if result == 'O':
        return 10 - depth
    elif result == 'X':
        return depth - 10
    elif result == 'Draw':
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'O'
                score = minimax(board, depth + 1, False)
                board[i] = ' '
                best_score = max(score, best_score)
        return best_score
    else:
        best_score = math.inf
        for i in range(9):
            if board[i] == ' ':
                board[i] = 'X'
                score = minimax(board, depth + 1, True)
                board[i] = ' '
                best_score = min(score, best_score)
        return best_score

def best_move(board):
    best_score = -math.inf
    move = None
    for i in range(9):
        if board[i] == ' ':
            board[i] = 'O'
            score = minimax(board, 0, False)
            board[i] = ' '
            if score > best_score:
                best_score = score
                move = i
    return move

def main():
    board = [' '] * 9
    print("Tic Tac Toe - You are X, Computer is O")
    print_board(board)

    while True:
        # Player move
        try:
            move = int(input("Enter your move (1-9): ")) - 1
        except ValueError:
            print("Invalid input. Please enter a number.")
            continue

        if move < 0 or move > 8 or board[move] != ' ':
            print("Invalid move. Try again.")
            continue

        board[move] = 'X'
        print_board(board)

        winner = check_winner(board)
        if winner:
            break

        # AI move
        ai_move = best_move(board)
        board[ai_move] = 'O'
        print("Computer played:")
        print_board(board)

        winner = check_winner(board)
        if winner:
            break

    if winner == 'Draw':
        print("It's a draw!")
    else:
        print(f"{winner} wins!")

if __name__ == '__main__':
    main()
import heapq

DIRECTIONS = [(-1, 0), (1, 0), (0, -1), (0, 1)]

def heuristic(a, b):
    return abs(a[0] - b[0]) + abs(a[1] - b[1])

def a_star(grid, start, goal):
    open_list = []
    heapq.heappush(open_list, (0 + heuristic(start, goal), 0, start))
    
    closed_list = set()
    
    g_costs = {start: 0}
    parents = {start: None}

    while open_list:
        _, g, current = heapq.heappop(open_list)

        if current == goal:
            path = []
            while current:
                path.append(current)
                current = parents[current]
            return path[::-1]

        closed_list.add(current)

        for direction in DIRECTIONS:
            neighbor = (current[0] + direction[0], current[1] + direction[1])

            if not (0 <= neighbor[0] < len(grid)) or not (0 <= neighbor[1] < len(grid[0])): 
                continue

            if grid[neighbor[0]][neighbor[1]] == 1: 
                continue

            if neighbor in closed_list:
                continue

            tentative_g = g + 1

            if neighbor not in g_costs or tentative_g < g_costs[neighbor]:
                g_costs[neighbor] = tentative_g
                f = tentative_g + heuristic(neighbor, goal)
                heapq.heappush(open_list, (f, tentative_g, neighbor))
                parents[neighbor] = current

    return None

grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 1, 0],
    [0, 1, 0, 0, 0],
    [0, 0, 0, 0, 0]
]

start = (0, 0)
goal = (4, 4)

path = a_star(grid, start, goal)

if path:
    print("Path found:", path)
else:
    print("No path found.")
def dfs(graph, start, goal, path=None):
    if path is None:
        path = []
    
    path.append(start)
    
    if start == goal:
        return path
    
    for neighbor in graph[start]:
        if neighbor not in path:  # Avoid revisiting nodes
            result = dfs(graph, neighbor, goal, path)
            if result:  # If the path is found, return it
                return result
    
    path.pop()  # Backtrack if no path is found from the current node
    return None

graph = {
    'A': ['B', 'C'],
    'B': ['D', 'E'],
    'C': ['F'],
    'D': [],
    'E': ['F'],
    'F': []
}

start = 'A'
goal = 'F'

path = dfs(graph, start, goal)

if path:
    print(f"Path found from {start} to {goal}: {path}")
else:
    print(f"No path found from {start} to {goal}")
